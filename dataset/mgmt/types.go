// This file was generated by nomdl/codegen.

package mgmt

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __mgmtPackageInFile_types_CachedRef = __mgmtPackageInFile_types_Ref()

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func __mgmtPackageInFile_types_Ref() ref.Ref {
	p := types.PackageDef{
		NamedTypes: types.MapOfStringToTypeRefDef{

			"Dataset": types.MakeStructTypeRef("Dataset",
				[]types.Field{
					types.Field{"id", types.MakePrimitiveTypeRef(types.StringKind), false},
					types.Field{"head", types.MakePrimitiveTypeRef(types.ValueKind), false},
				},
				types.Choices{},
			),
		},
	}.New()
	return types.RegisterPackage(&p)
}

// SetOfDataset

type SetOfDataset struct {
	s types.Set
}

func NewSetOfDataset() SetOfDataset {
	return SetOfDataset{types.NewSet()}
}

type SetOfDatasetDef map[DatasetDef]bool

func (def SetOfDatasetDef) New() SetOfDataset {
	l := make([]types.Value, len(def))
	i := 0
	for d, _ := range def {
		l[i] = d.New().NomsValue()
		i++
	}
	return SetOfDataset{types.NewSet(l...)}
}

func (s SetOfDataset) Def() SetOfDatasetDef {
	def := make(map[DatasetDef]bool, s.Len())
	s.s.Iter(func(v types.Value) bool {
		def[DatasetFromVal(v).Def()] = true
		return false
	})
	return def
}

func SetOfDatasetFromVal(p types.Value) SetOfDataset {
	return SetOfDataset{p.(types.Set)}
}

func (s SetOfDataset) NomsValue() types.Value {
	return s.s
}

func (s SetOfDataset) Equals(p SetOfDataset) bool {
	return s.s.Equals(p.s)
}

func (s SetOfDataset) Ref() ref.Ref {
	return s.s.Ref()
}

// A Noms Value that describes SetOfDataset.
var __typeRefForSetOfDataset = types.MakeCompoundTypeRef("", types.SetKind, types.MakeTypeRef("Dataset", ref.Ref{}))

func (m SetOfDataset) TypeRef() types.TypeRef {
	return __typeRefForSetOfDataset
}

func (s SetOfDataset) Empty() bool {
	return s.s.Empty()
}

func (s SetOfDataset) Len() uint64 {
	return s.s.Len()
}

func (s SetOfDataset) Has(p Dataset) bool {
	return s.s.Has(p.NomsValue())
}

type SetOfDatasetIterCallback func(p Dataset) (stop bool)

func (s SetOfDataset) Iter(cb SetOfDatasetIterCallback) {
	s.s.Iter(func(v types.Value) bool {
		return cb(DatasetFromVal(v))
	})
}

type SetOfDatasetIterAllCallback func(p Dataset)

func (s SetOfDataset) IterAll(cb SetOfDatasetIterAllCallback) {
	s.s.IterAll(func(v types.Value) {
		cb(DatasetFromVal(v))
	})
}

type SetOfDatasetFilterCallback func(p Dataset) (keep bool)

func (s SetOfDataset) Filter(cb SetOfDatasetFilterCallback) SetOfDataset {
	ns := NewSetOfDataset()
	s.IterAll(func(v Dataset) {
		if cb(v) {
			ns = ns.Insert(v)
		}
	})
	return ns
}

func (s SetOfDataset) Insert(p ...Dataset) SetOfDataset {
	return SetOfDataset{s.s.Insert(s.fromElemSlice(p)...)}
}

func (s SetOfDataset) Remove(p ...Dataset) SetOfDataset {
	return SetOfDataset{s.s.Remove(s.fromElemSlice(p)...)}
}

func (s SetOfDataset) Union(others ...SetOfDataset) SetOfDataset {
	return SetOfDataset{s.s.Union(s.fromStructSlice(others)...)}
}

func (s SetOfDataset) Subtract(others ...SetOfDataset) SetOfDataset {
	return SetOfDataset{s.s.Subtract(s.fromStructSlice(others)...)}
}

func (s SetOfDataset) Any() Dataset {
	return DatasetFromVal(s.s.Any())
}

func (s SetOfDataset) fromStructSlice(p []SetOfDataset) []types.Set {
	r := make([]types.Set, len(p))
	for i, v := range p {
		r[i] = v.s
	}
	return r
}

func (s SetOfDataset) fromElemSlice(p []Dataset) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v.NomsValue()
	}
	return r
}

// Dataset

type Dataset struct {
	m types.Map
}

func NewDataset() Dataset {
	return Dataset{types.NewMap(
		types.NewString("$name"), types.NewString("Dataset"),
		types.NewString("$type"), types.MakeTypeRef("Dataset", __mgmtPackageInFile_types_CachedRef),
		types.NewString("id"), types.NewString(""),
		types.NewString("head"), types.Bool(false),
	)}
}

type DatasetDef struct {
	Id   string
	Head types.Value
}

func (def DatasetDef) New() Dataset {
	return Dataset{
		types.NewMap(
			types.NewString("$name"), types.NewString("Dataset"),
			types.NewString("$type"), types.MakeTypeRef("Dataset", __mgmtPackageInFile_types_CachedRef),
			types.NewString("id"), types.NewString(def.Id),
			types.NewString("head"), def.Head,
		)}
}

func (s Dataset) Def() (d DatasetDef) {
	d.Id = s.m.Get(types.NewString("id")).(types.String).String()
	d.Head = s.m.Get(types.NewString("head"))
	return
}

func (m Dataset) TypeRef() types.TypeRef {
	return types.MakeTypeRef("Dataset", __mgmtPackageInFile_types_CachedRef)
}

func DatasetFromVal(val types.Value) Dataset {
	// TODO: Validate here
	return Dataset{val.(types.Map)}
}

func (s Dataset) NomsValue() types.Value {
	return s.m
}

func (s Dataset) Equals(other Dataset) bool {
	return s.m.Equals(other.m)
}

func (s Dataset) Ref() ref.Ref {
	return s.m.Ref()
}

func (s Dataset) Id() string {
	return s.m.Get(types.NewString("id")).(types.String).String()
}

func (s Dataset) SetId(val string) Dataset {
	return Dataset{s.m.Set(types.NewString("id"), types.NewString(val))}
}

func (s Dataset) Head() types.Value {
	return s.m.Get(types.NewString("head"))
}

func (s Dataset) SetHead(val types.Value) Dataset {
	return Dataset{s.m.Set(types.NewString("head"), val)}
}
