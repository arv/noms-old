// This file was generated by nomdl/codegen.

package encode

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// ListOfBool

type ListOfBool struct {
	l types.List
}

func NewListOfBool() ListOfBool {
	return ListOfBool{types.NewList()}
}

type ListOfBoolDef []bool

func (def ListOfBoolDef) New() ListOfBool {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = types.Bool(d)
	}
	return ListOfBool{types.NewList(l...)}
}

func (l ListOfBool) Def() ListOfBoolDef {
	d := make([]bool, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = bool(l.l.Get(i).(types.Bool))
	}
	return d
}

func ListOfBoolFromVal(val types.Value) ListOfBool {
	// TODO: Validate here
	return ListOfBool{val.(types.List)}
}

func (l ListOfBool) NomsValue() types.Value {
	return l.l
}

func (l ListOfBool) Equals(p ListOfBool) bool {
	return l.l.Equals(p.l)
}

func (l ListOfBool) Ref() ref.Ref {
	return l.l.Ref()
}

// A Noms Value that describes ListOfBool.
var __typeRefForListOfBool = types.MakeCompoundTypeRef("", types.ListKind, types.MakePrimitiveTypeRef(types.BoolKind))

func (m ListOfBool) TypeRef() types.TypeRef {
	return __typeRefForListOfBool
}

func (l ListOfBool) Len() uint64 {
	return l.l.Len()
}

func (l ListOfBool) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfBool) Get(i uint64) bool {
	return bool(l.l.Get(i).(types.Bool))
}

func (l ListOfBool) Slice(idx uint64, end uint64) ListOfBool {
	return ListOfBool{l.l.Slice(idx, end)}
}

func (l ListOfBool) Set(i uint64, val bool) ListOfBool {
	return ListOfBool{l.l.Set(i, types.Bool(val))}
}

func (l ListOfBool) Append(v ...bool) ListOfBool {
	return ListOfBool{l.l.Append(l.fromElemSlice(v)...)}
}

func (l ListOfBool) Insert(idx uint64, v ...bool) ListOfBool {
	return ListOfBool{l.l.Insert(idx, l.fromElemSlice(v)...)}
}

func (l ListOfBool) Remove(idx uint64, end uint64) ListOfBool {
	return ListOfBool{l.l.Remove(idx, end)}
}

func (l ListOfBool) RemoveAt(idx uint64) ListOfBool {
	return ListOfBool{(l.l.RemoveAt(idx))}
}

func (l ListOfBool) fromElemSlice(p []bool) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = types.Bool(v)
	}
	return r
}

type ListOfBoolIterCallback func(v bool) (stop bool)

func (l ListOfBool) Iter(cb ListOfBoolIterCallback) {
	l.l.Iter(func(v types.Value) bool {
		return cb(bool(v.(types.Bool)))
	})
}

type ListOfBoolIterAllCallback func(v bool)

func (l ListOfBool) IterAll(cb ListOfBoolIterAllCallback) {
	l.l.IterAll(func(v types.Value) {
		cb(bool(v.(types.Bool)))
	})
}

type ListOfBoolFilterCallback func(v bool) (keep bool)

func (l ListOfBool) Filter(cb ListOfBoolFilterCallback) ListOfBool {
	nl := NewListOfBool()
	l.IterAll(func(v bool) {
		if cb(v) {
			nl = nl.Append(v)
		}
	})
	return nl
}
